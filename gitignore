#!/usr/bin/env bash

############################################################
# Constants                                                #
############################################################

# Define constants
declare -r CACHE_DIRECTORY="$HOME/.gitignore-cache"
declare -r REPOSITORY_URL="https://github.com/github/gitignore.git"
declare -r CUSTOM_RULES_FILE=".custom.gitignore"

############################################################
# Commands                                                 #
############################################################

# Generates a combined gitignore file from the specified templates
# @param $@ The list of the gitiginore templates to use
function generate() {
    create_or_update_cache

    echo "# Generated using 'gitignore generate $@'"
    echo ""

    if [ -f "$CUSTOM_RULES_FILE" ]
    then
        cat $CUSTOM_RULES_FILE
    fi

    for file in "$@"
    do
        echo "$CACHE_DIRECTORY/$file.gitignore"
    done | xargs cat
}

# Search all available gitignore files
# @param $@ The search queries
function search() {
    create_or_update_cache

    for query in "$@"
    do
        list | grep -i $query
    done    
}

# Lists all available gitignore templates
function list() {
    create_or_update_cache
    find $CACHE_DIRECTORY -name "*.gitignore" | sed "s|$CACHE_DIRECTORY/||" | sed "s|.gitignore||" | sort
}

# Handles creating or updating the cached gitignore files
function create_or_update_cache() {
    if does_cache_exist
    then 
        update_cache
    else 
        create_gitignore_cache
    fi
}

# Checks if the cached gitignore files exist
function does_cache_exist() {
    [ -d "$CACHE_DIRECTORY" ]
}

# Updates the cached gitignore files
function update_cache() {
    git -C $CACHE_DIRECTORY pull
}

#Â Creates a cache of the gitignore files
function create_gitignore_cache() {
    git clone $REPOSITORY_URL $CACHE_DIRECTORY
}

############################################################
# Main                                                     #
############################################################

# Required as this is invoked as a script rather than sourced
# This MUST be the first operation other than the function definitions
[[ $_ != $0 ]]

# Check a valid function was specified
if declare -f "$1" >/dev/null 2>&1; then
  # Invoke the specified function, passing arguments through
  "$@" # Same as "$1" "$2" "$3" ... for full argument list
else
  echo "Function $1 not recognized" >&2
  exit 1
fi
